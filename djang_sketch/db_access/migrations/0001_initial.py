# Generated by Django 2.2 on 2019-04-09 21:21

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CatalogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(max_length=100)),
                ('duration_in_minutes', models.PositiveSmallIntegerField(choices=[('short', 'short'), ('medium', 'medium'), ('extra medium', 'extra medium')], help_text='Duration', verbose_name='Duration')),
                ('player_max', models.SmallIntegerField(help_text='Maximum number of players, including GM if they will be playing')),
                ('short_description', models.TextField(help_text='Maximum 400 characters', verbose_name='Short Description')),
                ('long_description', models.TextField(help_text='Maximum 2500 characters', verbose_name='Long Description')),
                ('url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('game_system', models.CharField(blank=True, help_text='D&D 3.5, GURPS, etc', max_length=50, null=True)),
                ('conflict_type', models.SmallIntegerField(choices=[('nope', 'nope'), ('denied', 'denied'), ('you dun goofed', 'you dun goofed')], default='nope')),
                ('proofread', models.BooleanField(default=False)),
                ('proofread_time', models.DateTimeField(blank=True, null=True)),
                ('track', models.CharField(choices=[('choo choo', 'choo choo'), ('jamaican', 'jamaican')], db_index=True, max_length=5)),
                ('active', models.BooleanField(default=True)),
                ('in_library', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Catalog Entries',
            },
        ),
        migrations.CreateModel(
            name='Convention',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('tag', models.CharField(max_length=10)),
                ('start_day_time', models.DateTimeField()),
                ('end_day_time', models.DateTimeField()),
                ('event_submissions_open', models.DateTimeField()),
                ('event_submissions_close', models.DateTimeField()),
                ('signups_open', models.DateTimeField()),
                ('signups_close', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='GCUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('wp_user_id', models.PositiveSmallIntegerField(db_index=True, unique=True)),
                ('is_member', models.BooleanField(default=False)),
                ('age', models.SmallIntegerField(blank=True, null=True)),
                ('session_key', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'GameCon User',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_type', models.CharField(choices=[('here', 'here'), ('there', 'there')], max_length=5)),
                ('capacity', models.PositiveSmallIntegerField()),
                ('name', models.CharField(max_length=40)),
                ('tag', models.CharField(max_length=10, unique=True)),
                ('table_type', models.CharField(blank=True, choices=[('hither', 'hither'), ('thither', 'thither')], default='thither', max_length=6, null=True)),
                ('length_in_inches', models.SmallIntegerField(blank=True, null=True)),
                ('width_in_inches', models.SmallIntegerField(blank=True, null=True)),
                ('diameter_in_inches', models.SmallIntegerField(blank=True, null=True)),
                ('area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.Area')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='room_location', to='db_access.Location')),
            ],
            options={
                'ordering': ['tag'],
                'index_together': {('capacity', 'table_type'), ('table_type', 'capacity')},
            },
        ),
        migrations.CreateModel(
            name='Scheduler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('gc_user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.GCUser')),
            ],
            options={
                'ordering': ['gc_user'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('gc_user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.GCUser')),
            ],
            options={
                'ordering': ['gc_user'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(max_length=100)),
                ('duration_in_minutes', models.PositiveSmallIntegerField(choices=[('short', 'short'), ('medium', 'medium'), ('extra medium', 'extra medium')], help_text='Duration', verbose_name='Duration')),
                ('player_max', models.SmallIntegerField(help_text='Maximum number of players, including GM if they will be playing')),
                ('short_description', models.TextField(help_text='Maximum 400 characters', verbose_name='Short Description')),
                ('long_description', models.TextField(help_text='Maximum 2500 characters', verbose_name='Long Description')),
                ('url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('game_system', models.CharField(blank=True, help_text='D&D 3.5, GURPS, etc', max_length=50, null=True)),
                ('conflict_type', models.SmallIntegerField(choices=[('nope', 'nope'), ('denied', 'denied'), ('you dun goofed', 'you dun goofed')], default='nope')),
                ('proofread', models.BooleanField(default=False)),
                ('proofread_time', models.DateTimeField(blank=True, null=True)),
                ('track', models.CharField(choices=[('choo choo', 'choo choo'), ('jamaican', 'jamaican')], db_index=True, max_length=5)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('public', models.BooleanField(default=False)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('gm_is_player', models.BooleanField(default=False, help_text='Check if GM will be playing the game', verbose_name='GM is a player')),
                ('gm_is_designer', models.BooleanField(default=False, help_text='Check if GM designed the game')),
                ('user_notes', models.TextField(blank=True, default='', verbose_name='Note to Scheduler')),
                ('scheduler_notes', models.TextField(blank=True, default='')),
                ('experience', models.CharField(choices=[('level 1', 'level 1'), ('level 9001', 'level 9001')], default='level 1', max_length=3)),
                ('status', models.CharField(choices=[('here today', 'here today'), ('gone tomorrow', 'gone tomorrow')], db_index=True, max_length=4)),
                ('age_group', models.CharField(choices=[('all', 'all'), ('none', 'none')], default='all', max_length=3)),
                ('table_type', models.CharField(choices=[('mine', 'mine'), ('yours', 'yours')], default='yours', max_length=6)),
                ('event_type', models.CharField(choices=[('magic', 'magic'), ('more magic', 'more magic')], default='more magic', max_length=5)),
                ('more_tracks', models.BooleanField(default=False)),
                ('catalog_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.CatalogEntry')),
                ('convention', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.Convention')),
                ('proofread_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.GCUser')),
                ('scheduler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_scheduler', to='db_access.GCUser')),
                ('submitter', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_submitter', to='db_access.GCUser')),
            ],
            options={
                'ordering': ['convention', 'start_time'],
                'index_together': {('convention', 'start_time', 'track', 'event_name'), ('convention', 'track', 'public'), ('convention', 'track', 'status'), ('convention', 'event_name', 'start_time'), ('convention', 'submitter', 'track'), ('convention', 'track', 'start_time', 'event_name')},
            },
        ),
        migrations.CreateModel(
            name='Editor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('gc_user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.GCUser')),
            ],
            options={
                'ordering': ['gc_user'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='catalogentry',
            name='proofread_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.GCUser'),
        ),
        migrations.AddField(
            model_name='catalogentry',
            name='submitter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='catalogentry_submitter', to='db_access.GCUser'),
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('gc_user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.GCUser')),
            ],
            options={
                'ordering': ['gc_user'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrackAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track', models.CharField(choices=[('choo choo', 'choo choo'), ('jamaican', 'jamaican')], db_index=True, max_length=5)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.Event')),
            ],
            options={
                'unique_together': {('event', 'track')},
            },
        ),
        migrations.CreateModel(
            name='SchedulerAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.Area')),
                ('scheduler', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='db_access.Scheduler')),
            ],
            options={
                'ordering': ['scheduler', 'start'],
                'unique_together': {('area', 'start')},
            },
        ),
        migrations.CreateModel(
            name='LocationAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_assignment', to='db_access.Event')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='location_assignment', to='db_access.Location')),
            ],
            options={
                'verbose_name_plural': 'Location Assignments',
                'unique_together': {('event', 'location')},
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_favorite', to='db_access.Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_favorite', to='db_access.GCUser')),
            ],
            options={
                'unique_together': {('user', 'event')},
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(choices=[('yer mom', 'yer mom'), ('teh boss', 'teh boss'), ('blab', 'blab'), ('Sam', 'Sam')], max_length=8)),
                ('conflict_type', models.SmallIntegerField(choices=[('nope', 'nope'), ('denied', 'denied'), ('you dun goofed', 'you dun goofed')], default='nope')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_connection', to='db_access.Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_connection', to='db_access.GCUser')),
            ],
            options={
                'ordering': ['event'],
                'unique_together': {('user', 'event', 'role')},
                'index_together': {('event', 'user', 'role'), ('event', 'role'), ('user', 'role')},
            },
        ),
    ]
